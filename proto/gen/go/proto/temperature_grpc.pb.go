// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/temperature.proto

package jacuzziv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TemperatureService_SubmitTemperature_FullMethodName      = "/jacuzzi.v1.TemperatureService/SubmitTemperature"
	TemperatureService_GetTemperatureHistory_FullMethodName  = "/jacuzzi.v1.TemperatureService/GetTemperatureHistory"
	TemperatureService_GetCurrentTemperatures_FullMethodName = "/jacuzzi.v1.TemperatureService/GetCurrentTemperatures"
)

// TemperatureServiceClient is the client API for TemperatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for temperature monitoring
type TemperatureServiceClient interface {
	// Submit temperature readings from client
	SubmitTemperature(ctx context.Context, in *SubmitTemperatureRequest, opts ...grpc.CallOption) (*SubmitTemperatureResponse, error)
	// Get temperature history for a sensor
	GetTemperatureHistory(ctx context.Context, in *GetTemperatureHistoryRequest, opts ...grpc.CallOption) (*GetTemperatureHistoryResponse, error)
	// Get current temperatures for all sensors of a client
	GetCurrentTemperatures(ctx context.Context, in *GetCurrentTemperaturesRequest, opts ...grpc.CallOption) (*GetCurrentTemperaturesResponse, error)
}

type temperatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemperatureServiceClient(cc grpc.ClientConnInterface) TemperatureServiceClient {
	return &temperatureServiceClient{cc}
}

func (c *temperatureServiceClient) SubmitTemperature(ctx context.Context, in *SubmitTemperatureRequest, opts ...grpc.CallOption) (*SubmitTemperatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitTemperatureResponse)
	err := c.cc.Invoke(ctx, TemperatureService_SubmitTemperature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) GetTemperatureHistory(ctx context.Context, in *GetTemperatureHistoryRequest, opts ...grpc.CallOption) (*GetTemperatureHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemperatureHistoryResponse)
	err := c.cc.Invoke(ctx, TemperatureService_GetTemperatureHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) GetCurrentTemperatures(ctx context.Context, in *GetCurrentTemperaturesRequest, opts ...grpc.CallOption) (*GetCurrentTemperaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentTemperaturesResponse)
	err := c.cc.Invoke(ctx, TemperatureService_GetCurrentTemperatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemperatureServiceServer is the server API for TemperatureService service.
// All implementations should embed UnimplementedTemperatureServiceServer
// for forward compatibility.
//
// Service definition for temperature monitoring
type TemperatureServiceServer interface {
	// Submit temperature readings from client
	SubmitTemperature(context.Context, *SubmitTemperatureRequest) (*SubmitTemperatureResponse, error)
	// Get temperature history for a sensor
	GetTemperatureHistory(context.Context, *GetTemperatureHistoryRequest) (*GetTemperatureHistoryResponse, error)
	// Get current temperatures for all sensors of a client
	GetCurrentTemperatures(context.Context, *GetCurrentTemperaturesRequest) (*GetCurrentTemperaturesResponse, error)
}

// UnimplementedTemperatureServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemperatureServiceServer struct{}

func (UnimplementedTemperatureServiceServer) SubmitTemperature(context.Context, *SubmitTemperatureRequest) (*SubmitTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTemperature not implemented")
}
func (UnimplementedTemperatureServiceServer) GetTemperatureHistory(context.Context, *GetTemperatureHistoryRequest) (*GetTemperatureHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperatureHistory not implemented")
}
func (UnimplementedTemperatureServiceServer) GetCurrentTemperatures(context.Context, *GetCurrentTemperaturesRequest) (*GetCurrentTemperaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTemperatures not implemented")
}
func (UnimplementedTemperatureServiceServer) testEmbeddedByValue() {}

// UnsafeTemperatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemperatureServiceServer will
// result in compilation errors.
type UnsafeTemperatureServiceServer interface {
	mustEmbedUnimplementedTemperatureServiceServer()
}

func RegisterTemperatureServiceServer(s grpc.ServiceRegistrar, srv TemperatureServiceServer) {
	// If the following call pancis, it indicates UnimplementedTemperatureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TemperatureService_ServiceDesc, srv)
}

func _TemperatureService_SubmitTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).SubmitTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureService_SubmitTemperature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).SubmitTemperature(ctx, req.(*SubmitTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_GetTemperatureHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemperatureHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).GetTemperatureHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureService_GetTemperatureHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).GetTemperatureHistory(ctx, req.(*GetTemperatureHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_GetCurrentTemperatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentTemperaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).GetCurrentTemperatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureService_GetCurrentTemperatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).GetCurrentTemperatures(ctx, req.(*GetCurrentTemperaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemperatureService_ServiceDesc is the grpc.ServiceDesc for TemperatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemperatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jacuzzi.v1.TemperatureService",
	HandlerType: (*TemperatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTemperature",
			Handler:    _TemperatureService_SubmitTemperature_Handler,
		},
		{
			MethodName: "GetTemperatureHistory",
			Handler:    _TemperatureService_GetTemperatureHistory_Handler,
		},
		{
			MethodName: "GetCurrentTemperatures",
			Handler:    _TemperatureService_GetCurrentTemperatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/temperature.proto",
}
