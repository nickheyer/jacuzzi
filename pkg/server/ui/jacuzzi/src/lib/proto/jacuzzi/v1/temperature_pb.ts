// @generated by protoc-gen-es v2.6.0 with parameter "target=ts"
// @generated from file jacuzzi/v1/temperature.proto (package jacuzzi.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file jacuzzi/v1/temperature.proto.
 */
export const file_jacuzzi_v1_temperature: GenFile = /*@__PURE__*/
  fileDesc("ChxqYWN1enppL3YxL3RlbXBlcmF0dXJlLnByb3RvEgpqYWN1enppLnYxIrABChJUZW1wZXJhdHVyZVJlYWRpbmcSEQoJc2Vuc29yX2lkGAEgASgJEhEKCWNsaWVudF9pZBgCIAEoCRIbChN0ZW1wZXJhdHVyZV9jZWxzaXVzGAMgASgBEi0KCXRpbWVzdGFtcBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEwoLc2Vuc29yX3R5cGUYBSABKAkSEwoLc2Vuc29yX25hbWUYBiABKAkiTAoYU3VibWl0VGVtcGVyYXR1cmVSZXF1ZXN0EjAKCHJlYWRpbmdzGAEgAygLMh4uamFjdXp6aS52MS5UZW1wZXJhdHVyZVJlYWRpbmciPQoZU3VibWl0VGVtcGVyYXR1cmVSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEg8KB21lc3NhZ2UYAiABKAkisQEKHEdldFRlbXBlcmF0dXJlSGlzdG9yeVJlcXVlc3QSEQoJY2xpZW50X2lkGAEgASgJEhEKCXNlbnNvcl9pZBgCIAEoCRIuCgpzdGFydF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDQoFbGltaXQYBSABKAUiUQodR2V0VGVtcGVyYXR1cmVIaXN0b3J5UmVzcG9uc2USMAoIcmVhZGluZ3MYASADKAsyHi5qYWN1enppLnYxLlRlbXBlcmF0dXJlUmVhZGluZyIyCh1HZXRDdXJyZW50VGVtcGVyYXR1cmVzUmVxdWVzdBIRCgljbGllbnRfaWQYASABKAkiUgoeR2V0Q3VycmVudFRlbXBlcmF0dXJlc1Jlc3BvbnNlEjAKCHJlYWRpbmdzGAEgAygLMh4uamFjdXp6aS52MS5UZW1wZXJhdHVyZVJlYWRpbmcy1QIKElRlbXBlcmF0dXJlU2VydmljZRJgChFTdWJtaXRUZW1wZXJhdHVyZRIkLmphY3V6emkudjEuU3VibWl0VGVtcGVyYXR1cmVSZXF1ZXN0GiUuamFjdXp6aS52MS5TdWJtaXRUZW1wZXJhdHVyZVJlc3BvbnNlEmwKFUdldFRlbXBlcmF0dXJlSGlzdG9yeRIoLmphY3V6emkudjEuR2V0VGVtcGVyYXR1cmVIaXN0b3J5UmVxdWVzdBopLmphY3V6emkudjEuR2V0VGVtcGVyYXR1cmVIaXN0b3J5UmVzcG9uc2USbwoWR2V0Q3VycmVudFRlbXBlcmF0dXJlcxIpLmphY3V6emkudjEuR2V0Q3VycmVudFRlbXBlcmF0dXJlc1JlcXVlc3QaKi5qYWN1enppLnYxLkdldEN1cnJlbnRUZW1wZXJhdHVyZXNSZXNwb25zZUI+WjxnaXRodWIuY29tL25pY2toZXllci9qYWN1enppL3BrZy9nZW4vZ28vamFjdXp6aS92MTtqYWN1enppdjFiBnByb3RvMw", [file_google_protobuf_timestamp]);

/**
 * Temperature reading from a sensor
 *
 * @generated from message jacuzzi.v1.TemperatureReading
 */
export type TemperatureReading = Message<"jacuzzi.v1.TemperatureReading"> & {
  /**
   * @generated from field: string sensor_id = 1;
   */
  sensorId: string;

  /**
   * @generated from field: string client_id = 2;
   */
  clientId: string;

  /**
   * @generated from field: double temperature_celsius = 3;
   */
  temperatureCelsius: number;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 4;
   */
  timestamp?: Timestamp;

  /**
   * CPU, GPU, DISK, etc.
   *
   * @generated from field: string sensor_type = 5;
   */
  sensorType: string;

  /**
   * Human readable name
   *
   * @generated from field: string sensor_name = 6;
   */
  sensorName: string;
};

/**
 * Describes the message jacuzzi.v1.TemperatureReading.
 * Use `create(TemperatureReadingSchema)` to create a new message.
 */
export const TemperatureReadingSchema: GenMessage<TemperatureReading> = /*@__PURE__*/
  messageDesc(file_jacuzzi_v1_temperature, 0);

/**
 * Request to submit temperature readings
 *
 * @generated from message jacuzzi.v1.SubmitTemperatureRequest
 */
export type SubmitTemperatureRequest = Message<"jacuzzi.v1.SubmitTemperatureRequest"> & {
  /**
   * @generated from field: repeated jacuzzi.v1.TemperatureReading readings = 1;
   */
  readings: TemperatureReading[];
};

/**
 * Describes the message jacuzzi.v1.SubmitTemperatureRequest.
 * Use `create(SubmitTemperatureRequestSchema)` to create a new message.
 */
export const SubmitTemperatureRequestSchema: GenMessage<SubmitTemperatureRequest> = /*@__PURE__*/
  messageDesc(file_jacuzzi_v1_temperature, 1);

/**
 * Response for temperature submission
 *
 * @generated from message jacuzzi.v1.SubmitTemperatureResponse
 */
export type SubmitTemperatureResponse = Message<"jacuzzi.v1.SubmitTemperatureResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message jacuzzi.v1.SubmitTemperatureResponse.
 * Use `create(SubmitTemperatureResponseSchema)` to create a new message.
 */
export const SubmitTemperatureResponseSchema: GenMessage<SubmitTemperatureResponse> = /*@__PURE__*/
  messageDesc(file_jacuzzi_v1_temperature, 2);

/**
 * Request to get temperature history
 *
 * @generated from message jacuzzi.v1.GetTemperatureHistoryRequest
 */
export type GetTemperatureHistoryRequest = Message<"jacuzzi.v1.GetTemperatureHistoryRequest"> & {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * @generated from field: string sensor_id = 2;
   */
  sensorId: string;

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;

  /**
   * @generated from field: int32 limit = 5;
   */
  limit: number;
};

/**
 * Describes the message jacuzzi.v1.GetTemperatureHistoryRequest.
 * Use `create(GetTemperatureHistoryRequestSchema)` to create a new message.
 */
export const GetTemperatureHistoryRequestSchema: GenMessage<GetTemperatureHistoryRequest> = /*@__PURE__*/
  messageDesc(file_jacuzzi_v1_temperature, 3);

/**
 * Response with temperature history
 *
 * @generated from message jacuzzi.v1.GetTemperatureHistoryResponse
 */
export type GetTemperatureHistoryResponse = Message<"jacuzzi.v1.GetTemperatureHistoryResponse"> & {
  /**
   * @generated from field: repeated jacuzzi.v1.TemperatureReading readings = 1;
   */
  readings: TemperatureReading[];
};

/**
 * Describes the message jacuzzi.v1.GetTemperatureHistoryResponse.
 * Use `create(GetTemperatureHistoryResponseSchema)` to create a new message.
 */
export const GetTemperatureHistoryResponseSchema: GenMessage<GetTemperatureHistoryResponse> = /*@__PURE__*/
  messageDesc(file_jacuzzi_v1_temperature, 4);

/**
 * Request to get current temperatures for all sensors
 *
 * @generated from message jacuzzi.v1.GetCurrentTemperaturesRequest
 */
export type GetCurrentTemperaturesRequest = Message<"jacuzzi.v1.GetCurrentTemperaturesRequest"> & {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId: string;
};

/**
 * Describes the message jacuzzi.v1.GetCurrentTemperaturesRequest.
 * Use `create(GetCurrentTemperaturesRequestSchema)` to create a new message.
 */
export const GetCurrentTemperaturesRequestSchema: GenMessage<GetCurrentTemperaturesRequest> = /*@__PURE__*/
  messageDesc(file_jacuzzi_v1_temperature, 5);

/**
 * Response with current temperatures
 *
 * @generated from message jacuzzi.v1.GetCurrentTemperaturesResponse
 */
export type GetCurrentTemperaturesResponse = Message<"jacuzzi.v1.GetCurrentTemperaturesResponse"> & {
  /**
   * @generated from field: repeated jacuzzi.v1.TemperatureReading readings = 1;
   */
  readings: TemperatureReading[];
};

/**
 * Describes the message jacuzzi.v1.GetCurrentTemperaturesResponse.
 * Use `create(GetCurrentTemperaturesResponseSchema)` to create a new message.
 */
export const GetCurrentTemperaturesResponseSchema: GenMessage<GetCurrentTemperaturesResponse> = /*@__PURE__*/
  messageDesc(file_jacuzzi_v1_temperature, 6);

/**
 * Service definition for temperature monitoring
 *
 * @generated from service jacuzzi.v1.TemperatureService
 */
export const TemperatureService: GenService<{
  /**
   * Submit temperature readings from client
   *
   * @generated from rpc jacuzzi.v1.TemperatureService.SubmitTemperature
   */
  submitTemperature: {
    methodKind: "unary";
    input: typeof SubmitTemperatureRequestSchema;
    output: typeof SubmitTemperatureResponseSchema;
  },
  /**
   * Get temperature history for a sensor
   *
   * @generated from rpc jacuzzi.v1.TemperatureService.GetTemperatureHistory
   */
  getTemperatureHistory: {
    methodKind: "unary";
    input: typeof GetTemperatureHistoryRequestSchema;
    output: typeof GetTemperatureHistoryResponseSchema;
  },
  /**
   * Get current temperatures for all sensors of a client
   *
   * @generated from rpc jacuzzi.v1.TemperatureService.GetCurrentTemperatures
   */
  getCurrentTemperatures: {
    methodKind: "unary";
    input: typeof GetCurrentTemperaturesRequestSchema;
    output: typeof GetCurrentTemperaturesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_jacuzzi_v1_temperature, 0);

